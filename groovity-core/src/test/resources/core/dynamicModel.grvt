/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
 
ModelFilter opener = ModelFilter.transform(Closure.class){
	it.call()
} 

def mn1 = [ a: [1,2,3], b: [4,5,6] ]
def mc1 = [ a: [1,2,3], b: { [4,5,6] } ]

omn1 = write(value: mn1, to: "", format: 'json')
omc1 = write(value: mc1, to: "", format: 'json')

assert omn1 == omc1

xmn1 = write(value: mn1, to: "", format: 'xml', root: 'c')
xmc1 = write(value: mc1, to: "", format: 'xml', root: 'c')

assert xmn1 == xmc1

assert Model.mapObject(mc1, opener) == mn1

assert Model.mapObject(mc1, ModelFilter.transform('b'){ it.call() }) == mn1


def mn2 = [ a: null, b: [ 1, 2, [3, 4, 5], null ], c: 'a' ]
def mc2 =  [ a: { null }, b: [ 1, 2, { [3, 4, 5] }, { null } ], c: { 'a' } ]

omn2 = write(value: mn2, to: "", format: 'json')
omc2 = write(value: mc2, to: "", format: 'json')

assert omn2 == omc2

xmn2 = write(value: mn2, to: "", format: 'xml', root: 'c')
xmc2 = write(value: mc2, to: "", format: 'xml', root: 'c')

assert xmn2 == xmc2

assert Model.mapObject(mc2, opener) == mn2

def mn3 = [ title: 'hello world', keywords:'computer science, programming, groovity']

ModelFilter upper = ModelFilter.transform(String.class){ it.toUpperCase() }

omn3 = write(value: mn3, to: "", format: 'json', filter: upper)

assert omn3 == '{"title":"HELLO WORLD","keywords":"COMPUTER SCIENCE, PROGRAMMING, GROOVITY"}'

class MyFavoriteThings{
	def things = ['kittens', 'puppies']
	
	def getThings(){
		things.reverse()
	}
	
	def getNada(){
		null
	}
}

ModelFilter thinger = ModelFilter.invoke(MyFavoriteThings.class, 'getThings', null)
ModelFilter nuller = ModelFilter.invoke('things', 'getNada', null)

def mn4 = [ title: 'hello world', things: new MyFavoriteThings()]

def omn4 = Model.mapObject(mn4, thinger)

assert  omn4 == [ title: 'hello world', things: ['puppies', 'kittens'] ]

def omn5 =  Model.mapObject(mn4, nuller)

assert  omn5 == [ title: 'hello world', things: null ]