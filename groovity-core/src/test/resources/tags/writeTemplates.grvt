/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import javax.xml.bind.annotation.*
 
def foo="bar"
def test1 =[a:[
	<~hello ${foo} <a>~>,
	123,
	<~, how are you?~>
]]
 
def r1 = write(value:test1,to:"")
assert r1 == '{"a":["hello bar <a>",123,", how are you?"]}'
r1 = write(value:test1,to:"",format:'~')
assert r1 == 'hello bar <a>, how are you?'
r1 = write(value:test1,to:"",format:'xml',root:'doc')
assert r1 == '<doc><a>hello bar &lt;a&gt;</a><a>123</a><a>, how are you?</a></doc>'
 
test1 =[
	a:  <~hello ${foo}~>,
	c: 123,
	b: <~, how are you?~>
]
 
r1 = write(value:test1,to:"")
assert r1 == '{"a":"hello bar","c":123,"b":", how are you?"}'
r1 = write(value:test1,to:"",format:'~')
assert r1 == 'hello bar, how are you?'
r1 = write(value:test1,to:"",format:'xml',root:'c')
assert r1 == '<c><a>hello bar</a><c>123</c><b>, how are you?</b></c>'

class A{
	@XmlValue
	def a 
}
class B{
	@XmlValue
	def b 
}

test1 =[
	new A(a : <~hello ${foo}~>),
	123,
	new B(b: <~, how are you?~>)
]

r1 = write(value:test1,to:"")
assert r1 == '[{"a":"hello bar"},123,{"b":", how are you?"}]'
r1 = write(value:test1,to:"",format:'~')
assert r1 == 'hello bar, how are you?'
r1 = write(value:test1,to:"",format:'xml',root:'c')
assert r1 == '<c><a>hello bar</a><integer>123</integer><b>, how are you?</b></c>'

test1 = [
	new A(a: "abc"),
	new B(b: "efg"),
	new A(a: "lmn"),
	new B(b: "pqr")
]

r1 =  write(value:test1,to:"",format:'~',filter:[
	ModelFilter.transform(A.class){ z-> <~(A) ${z.a}; ~>},
	ModelFilter.transform(B.class){ z-> <~(B) ${z.b}; ~>},
])
assert r1=="(A) abc; (B) efg; (A) lmn; (B) pqr; "

class C{
	def a
	
	def b = <~C ${a} ${d} ~>
}

test1 = [
	new C(a:'123'),
	new C(a:'456')
]

d = 'xyz'

r1 =  write(value:test1,to:"",format:'~')
assert r1=="C 123 xyz C 456 xyz "

class D{
	def e
}

test1 = [
	new D(e:'pqr'),
	new D(e:'xyz')
]

r1 =  write(value:test1,to:"",format:'~',filter:ModelFilter.add(D.class,""){ d->
	<~D ${d.e}; ~>
})
assert r1=="D pqr; D xyz; "
