/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/


static init(){
	accept(channel:'closeyourself',completed:{
		channelLatch.countDown()
	})
}
def la = []
def lb = []
def lc = []
def fiveChan
//test data series to completion, with internal halt and external close
await{
	fiveChan = accept(channel:'foo',completed:{la << 'closed'},{
		la << it
		if(it == 5){
			halt()
		}	
	})
	accept(channel:'foo',completed:{lb << 'closed'},{
		Thread.sleep(1)
		lb << it
	})
	def closeMe = accept(channel:'foo',completed:{lc << 'closed'},{
		lc << it
	})
	(1..10).each{
		offer(channel:'foo',value:it)
		if(it==3){
			closeMe.close();
		}
	}
	offer(channel:'foo')
}
//test offer timeout
def choker = accept(q:1){
	Thread.sleep(2000)
}
//first message occupies a thread
offer(channel:choker,value:'')
//second message fills the queue
offer(channel:choker,value:'')
def err = null;
try{
	//third message should timeout
	offer(channel:choker,timeout:1,value:'')
}
catch(InterruptedException ex){
	err = ex
}
assert err != null

//test await timeout
def lingerChan
def nowhereChan;
def secondChan;
def terr = null
try{
	lingerChan = accept()
	await(timeout:1){
		nowhereChan = accept()
		secondChan = accept()
	}
}
catch(java.util.concurrent.TimeoutException te){
	terr = te
}
assert terr != null
assert nowhereChan.isClosed()
assert nowhereChan.error != null
assert secondChan.isClosed()
assert secondChan.error != null
assert !lingerChan.isClosed()
assert lingerChan.error == null

//test handler error
def mistakeChan
def zerr=null
try{
	await{
		mistakeChan = accept{
			foo.barf()
		}
		offer(channel:mistakeChan){''}
	}
}
catch(java.util.concurrent.ExecutionException ee){
	zerr = ee
}
assert zerr !=null
assert mistakeChan.isClosed()
assert mistakeChan.error !=null

<~<g:minify>
<g:await><ul><g:accept var="chan"><li>${it}</li></g:accept>
	<g:each var="num" in="${0..10}">
		<g:offer channel="${chan}">"${num}"</g:offer>
	</g:each></ul><g:offer channel="${chan}"/>
</g:await>
</g:minify>${la.join(',')}|${lb.join(',')}|${lc.join(',')}|${fiveChan.asyncChannelManager.totalMessagesProcessed}~>
