/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/

import javax.xml.parsers.DocumentBuilderFactory

resp = http(method:"POST", url:"http://localhost:28197/mypost", data:['a':'b','c':'d'], {
	header(name:"Content-Type", value:"application/x-www-form-urlencoded")
})
out << <~
<g:write value="${resp}"/>
<g:http method="POST" var="resp" url="http://localhost:28197/mypost" data="['a':'b','c':'d']" to="${new StatusTest()}">
	<g:header name="Content-Type" value="application/json" />
</g:http>
<g:write value=";${resp.status}"/>
~>
assert resp instanceof StatusTest

out << <~<g:http method="POST" var="resp" url="http://localhost:28197/mypost" data="[['name':'part1','body':'part1 body'.bytes,'filename':'file1.txt'],['name':'part2','body':'part2 body']]">
	<g:header name="Content-Type" value="multipart/form-data"/>
</g:http>
<g:write value=";${resp}"/>
~>

assert !(resp instanceof StatusTest)

def builder  = DocumentBuilderFactory.newInstance().newDocumentBuilder();
def document = builder.newDocument();
def root = document.createElement("tag");
root.appendChild(document.createTextNode("content"));
document.appendChild(root);

out << <~
<g:http method="PUT" var="resp" url="http://localhost:28197/myput" data="${document}" to="${StatusTest.class}">
</g:http>
<g:write value=";${resp.status}"/>
~>

assert resp instanceof StatusTest

future = http(url:"http://localhost:28197/someEndpoint",method:"PUT",async:true,timeout:5,{
	header(name:'foo',value:'bar');
	param(name:'x',value:'z');
	<~This is the post body~>
  });

out << ";${future.get()}";

http(method:'PUT', url:'http://localhost:28197/myput', data: [abc:123]){
  header(name:'Content-Type',value:'application/json')
}

http(method:'PUT', url:'http://localhost:28197/myput', data: write(value:[abc:123],to:"")){
  header(name:'Content-Type',value:'application/json')
}

static foo(){
	http([var:"resp", url:"http://localhost:28197/mypost", method:"POST", data:['a':'b','c':'d']],{
		header(name:"Content-Type",value:"application/x-www-form-urlencoded")
	}) 
}
foo();
<~
<g:write value=";${resp}"/>
~>

class StatusTest{
	String status
}