/*******************************************************************************
 * Â© 2019 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import java.lang.management.ManagementFactory;
import javax.management.ObjectName;

static web = [
	path : "/groovity/servlet/admin/api/caches",
	output : "application/json",
	charset : "UTF-8",
	auth : [ policy:{run('/groovity/servlet/admin/apiPolicy')}],
	cors : [ policy:{run('/groovity/servlet/admin/apiPolicy')}],
	methods: ['GET', 'POST']
]

static args=[
	script: '',
	cacheName: ''
]

mbs = ManagementFactory.getPlatformMBeanServer()

objectNames = mbs.queryNames(new ObjectName("com.disney.groovity:type=CacheManager,*"), null)

caches = objectNames.collect{ objectName ->
	c = [
		name: objectName.keyPropertyList.name,
		script: objectName.keyPropertyList.script,
		hits: mbs.getAttribute(objectName,'CacheHits'),
		misses: mbs.getAttribute(objectName,'CacheMisses'),
		max: mbs.getAttribute(objectName,'MaxSize'),
		count: mbs.getAttribute(objectName,'Size')
	]
}

caches.sort{ -(it.hits+it.misses) }

if(request.method == 'POST'){
	//process cache and stats clearing
	if(script && cacheName){
		objectNames.findAll{ it.keyPropertyList.script == script && it.keyPropertyList.name == cacheName }.each{
			mbs.invoke(it, 'clearCache', new Object[0], new String[0])
			mbs.invoke(it, 'resetStats', new Object[0], new String[0])
		}
	}
}

write(value: caches)