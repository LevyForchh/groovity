/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import com.disney.groovity.servlet.uri.PathTemplate;
import static groovy.json.JsonOutput.toJson;

static web = [
	path : "/groovity/servlet/admin/api/paths",
	output : "application/json",
	charset : "UTF-8",
	auth : [ policy:{run('/groovity/servlet/admin/apiPolicy')}],
	cors : [ policy:{run('/groovity/servlet/admin/apiPolicy')}],
	method: 'GET'
]

pathMap = new TreeMap(PathTemplate.COMPARATOR);
conflictMap = new TreeMap(PathTemplate.COMPARATOR);
getClass().classLoader.scriptClasses.each{ scriptClass ->
	processor = {
		pathTemplate ->
		if(pathMap.containsKey(pathTemplate)){
			if(conflictMap.containsKey(pathTemplate)){
				log(debug:"Multiple conflicts for ${pathTemplate}")
				conflictMap[pathTemplate] += scriptClass.name;
			}
			else{
				log(debug:"First conflict for ${pathTemplate}")
				conflictMap[pathTemplate] = [ scriptClass.name ];
			}
		}
		else{
			log(debug:"No conflicts for ${pathTemplate}")
			pathMap[pathTemplate] = scriptClass.name
		}
	}
	
	try{
		processor(new PathTemplate(scriptClass.web.path));
	}
	catch(Exception e){}
	try{
		scriptClass.web.paths.collect({ new PathTemplate(it) }).each{ processor(it) };
	}
	catch(Exception e){}
}

templateList = [];
pathMap.collect(templateList,{k,v -> ["path":k.template,"view":v]});
conflictList = [];
conflictMap.collect(conflictList,{k,v -> ["path":k.template,"views":v]});
write(value:[paths:templateList,conflicts:conflictList]);
