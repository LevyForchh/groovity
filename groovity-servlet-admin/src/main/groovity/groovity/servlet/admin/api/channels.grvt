/*******************************************************************************
 * Â© 2019 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import java.lang.management.ManagementFactory;
import java.time.LocalDateTime
import javax.management.ObjectName;

static web = [
	path : "/groovity/servlet/admin/api/channels",
	output : "application/json",
	charset : "UTF-8",
	auth : [ policy:{run('/groovity/servlet/admin/apiPolicy')}],
	cors : [ policy:{run('/groovity/servlet/admin/apiPolicy')}],
	methods: ['GET', 'POST']
]

mbs = ManagementFactory.getPlatformMBeanServer()

objectNames = mbs.queryNames(new ObjectName("com.disney.groovity:type=AsyncChannelManager,*"), null)

channels = objectNames.collect{ objectName ->
	c = [
		channel: mbs.getAttribute(objectName,'ChannelName'),
		script: mbs.getAttribute(objectName,'ChannelContext'),
		capacity: mbs.getAttribute(objectName,'CapacityOfQueue'),
		queued: mbs.getAttribute(objectName,'CurrentNumOfMessages'),
		processed: mbs.getAttribute(objectName,'TotalMessagesProcessed'),
		dropped: mbs.getAttribute(objectName,'TotalMessagesDropped'),
		evicted: mbs.getAttribute(objectName,'TotalMessagesEvicted'),
		firstMessage: mbs.getAttribute(objectName,'FirstMessageProcessedTime'),
		lastMessage: mbs.getAttribute(objectName,'LastMessageProcessedTime'),
		meanProcessing: mbs.getAttribute(objectName,'MeanMessageProcessingTimeToMillis'),
		maxProcessing: mbs.getAttribute(objectName,'MaxMessageProcessingTimeToMillis'),
		lastProcessing: mbs.getAttribute(objectName,'LastMessageProcessingTimeToMillis'),
		totalProcessing: mbs.getAttribute(objectName,'TotalMessageProcessingTimeToMillis'),
	]
}

channels.sort{ -it.processed }

write(value: channels, pretty:true, filter:[
	ModelFilter.transform(LocalDateTime.class){
		it.toString()
	}
])