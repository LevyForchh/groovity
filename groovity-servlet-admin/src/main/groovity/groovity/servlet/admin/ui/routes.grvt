/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import com.disney.groovity.servlet.uri.PathTemplate;
import com.disney.groovity.servlet.PathTemplateMethods;
import static groovy.json.JsonOutput.toJson;

pathMap = new TreeMap();
conflictMap = new TreeMap();
getClass().classLoader.scriptClasses.each{ scriptClass ->
	processor = {
		pathTemplate ->
		if(pathMap.containsKey(pathTemplate)){
			if(conflictMap.containsKey(pathTemplate)){
				log(debug:"Multiple conflicts for ${pathTemplate}")
				conflictMap[pathTemplate] += scriptClass.name;
			}
			else{
				log(debug:"First conflict for ${pathTemplate}")
				conflictMap[pathTemplate] = [ scriptClass.name ];
			}
		}
		else{
			log(debug:"No conflicts for ${pathTemplate}")
			pathMap[pathTemplate] = scriptClass.name
		}
	}
	def methods = null;
	try{
		if(scriptClass.web?.method){
			methods = [scriptClass.web.method]
		}
	}
	catch(Exception e){}
	if(!methods){
		try{
			if(scriptClass.web?.methods){
				methods = scriptClass.web.methods
			}
		}
		catch(Exception e2){}
	}
	if(!methods){
		//default to full set
		methods = ['GET','POST','PUT','DELETE']
	}
	try{
		methods.each{ method ->
			processor(new PathTemplateMethods(new PathTemplate(scriptClass.web.path),[method] as HashSet));
		}
	}
	catch(Exception e){}
	try{
		methods.each{ method ->
			scriptClass.web.paths.collect({ new PathTemplateMethods(new PathTemplate(it),[method] as HashSet) }).each{ processor(it) };
		}
	}
	catch(Exception e){}

}

templateList = [];
pathMap.collect(templateList,{k,v -> ["path":k,"view":v]});
conflictList = [];
conflictMap.collect(conflictList,{k,v -> ["path":k,"views":v]});

@Function(info="HTML format a JAX-RS style path")
public String formatPath(PathTemplateMethods ptm){

	String path = ptm.pathTemplate.template
	StringBuilder builder = new StringBuilder();
	if(ptm.methods){
		builder.append("<strong style='color:#339933;font-size:0.7em;display:inline-block;width:50px;text-align:right;padding-right:4px'>").append(ptm.methods.first()).append("</strong> ")
	}
	int start=0;
	int pos = 0;
	while((pos = path.indexOf("{",start)) >=0){
		if(pos-start > 0){
			builder.append("<strong style='color:#333399'>").append(path.substring(start,pos)).append("</strong>");
		}
		start = path.indexOf("}",pos)+1;
		builder.append("<span style='color:#993333'>").append(path.substring(pos,start)).append("</span>");
	}
	if(start < path.length()){
		builder.append("<strong style='color:#333399'>").append(path.substring(start)).append("</strong>");
	}

	return builder.toString();
}

<~
<div style="height:94vh;overflow-y:auto;padding-top:0.5vh" class="v">
<div style="margin-top:0px;margin-bottom:9px;font-weight:bold">Active Routes</div>
<div style="padding-left:12px">
<g:each var="p" in="${templateList}">
	<div style="padding:3px">${formatPath(p.path)} <dd style="padding:1px"><em>--> ${p.view}</em></dd></div>
</g:each>
</div>
<div style="margin-top:24px;margin-bottom:9px;font-weight:bold">Conflicting Routes</div>
<div style="padding-left:12px">
<g:each var="p" in="${conflictList}">
	<div style="padding:3px">${formatPath(p.path)} <dd style="padding:1px"><em>--> ${p.views}</em></dd></div>
</g:each>
</div>
</div>
~>
