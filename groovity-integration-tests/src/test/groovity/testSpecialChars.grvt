/*******************************************************************************
 * © 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import org.apache.http.entity.ByteArrayEntity
import org.apache.http.entity.ContentType

static conf=[
	'groovity.port':int.class
]

def host = "http://localhost:${conf['groovity.port']}"

//utf-8 round trip
http(
	url: "${host}/charCheck",
	method: 'POST',
	data:[ message: 'åéü' ]
){
	header(name:'Content-Type', value:'application/json; charset=UTF-8')
	handler{ resp ->
		def message = parse(value:resp).message
		assert message == 'åéü'
	}
}


//windows round trip
String letters = new String([192, 225, 128,224] as byte[], "Windows-1252")
http(
	url: "${host}/charCheck",
	method: 'POST',
	data:[ message: letters ]
){
	header(name:'Content-Type', value:'application/json; charset=Windows-1252')
	header(name:'Accept-Charset', value:'Windows-1252')
	handler{ resp ->
		assert resp.getFirstHeader('Content-Type').value == 'application/json; charset=WINDOWS-1252'
		def message = parse(value:resp).message
		def bytes = message.getBytes('WINDOWS-1252')
		assert bytes[0] == (byte) 192
		assert bytes[1] == (byte) 225
		assert bytes[2] == (byte) 128
		assert bytes[3] == (byte) 224
	}
}

//utf-8 to windows
http(
	url: "${host}/charCheck",
	method: 'POST',
	data:[ message: "Àá€à" ]
){
	header(name:'Content-Type', value:'application/json; charset=UTF-8')
	header(name:'Accept-Charset', value:'Windows-1252')
	handler{ resp ->
		assert resp.getFirstHeader('Content-Type').value ==~ /(?i)application\/json;\s?charset=WINDOWS-1252/
		assert resp.getFirstHeader('Content-Length').value == "18"
		def data = parse(value:resp)
		def bytes = data.message.getBytes('WINDOWS-1252')
		assert bytes[0] == (byte) 192
		assert bytes[1] == (byte) 225
		assert bytes[2] == (byte) 128
		assert bytes[3] == (byte) 224
	}
}

//windows to UTF-8
http(
	url: "${host}/charCheck",
	method: 'POST',
	data:[ message: "Àá€à" ]
){
	header(name:'Content-Type', value:'application/json; charset=WINDOWS-1252')
	header(name:'Accept-Charset', value:'UTF-8')
	handler{ resp ->
		assert resp.getFirstHeader('Content-Type').value ==~ /(?i)application\/json;\s?charset=UTF-8/
		assert resp.getFirstHeader('Content-Length').value == "23"
		def message = parse(value:resp).message
		assert message == "Àá€à"
	}
}

//raw windows bytes
def rawWindowsBytes =[123, 34, 109, 101, 115, 115, 97, 103, 101, 34, 58, 34, -64, -31, -128, -32, 34, 125] as byte[]
http(
	url: "${host}/charCheck",
	method: 'POST',
	data: rawWindowsBytes
){
	header(name:'Content-Type', value:'application/json; charset=Windows-1252')
	header(name:'Accept-Charset', value:'Windows-1252')
	handler{ resp ->
		assert resp.getFirstHeader('Content-Type').value == 'application/json; charset=WINDOWS-1252'
		def message = parse(value:resp).message
		def bytes = message.getBytes('WINDOWS-1252')
		assert bytes[0] == (byte) 192
		assert bytes[1] == (byte) 225
		assert bytes[2] == (byte) 128
		assert bytes[3] == (byte) 224
	}
}

//bad unicode
http(
	url: "${host}/charCheck",
	method: 'POST',
	data: rawWindowsBytes
){
	header(name:'Content-Type', value:'application/json; charset=UTF-8')
	header(name:'Accept-Charset', value:'Windows-1252')
	handler{ resp ->
		assert resp.getFirstHeader('Content-Type').value == 'application/json; charset=WINDOWS-1252'
		def message = parse(value:resp).message
		def bytes = message.getBytes('WINDOWS-1252')
		assert bytes[0] == (byte) 63
		assert bytes[1] == (byte) 63
		assert bytes[2] == (byte) 63
	}
}