/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import org.apache.http.util.EntityUtils

static conf=[
	'groovity.port':int.class
]

def host = "http://localhost:${conf['groovity.port']}"

http(
	url: "${host}/truncatedChars"
){
	handler{ resp ->
		assert resp.statusLine.statusCode == 200
		assert resp.getFirstHeader('Content-Type').value.split(';')[0] == "text/plain"
		assert resp.getFirstHeader('Content-Length') == null
		assert EntityUtils.toString(resp.entity).length() == 300000
	}
}

http(
	url: "${host}/bufferedCharsErr"
){
	handler{ resp ->
		assert resp.statusLine.statusCode == 404
		assert resp.getFirstHeader('Content-Type').value.split(';')[0] == "text/html"
		assert EntityUtils.toString(resp.entity) == 'TruncatedErrorPage'
	}
}

http(
	url: "${host}/bufferedChars"
){
	handler{ resp ->
		assert resp.statusLine.statusCode == 200
		assert resp.getFirstHeader('Content-Type').value.split(';')[0] == "text/plain"
		assert resp.getFirstHeader('Content-Length').value == '400000'
		assert EntityUtils.toString(resp.entity).length() == 300000
	}
}

http(
	url: "${host}/truncatedBytes"
){
	handler{ resp ->
		assert resp.statusLine.statusCode == 200
		assert resp.getFirstHeader('Content-Type').value == "application/octet-stream"
		assert resp.getFirstHeader('Content-Length') == null
		assert resp.entity.content.bytes.length == 100000
	}
}

http(
	url: "${host}/bufferedBytesErr"
){
	handler{ resp ->
		assert resp.statusLine.statusCode == 404
		assert resp.getFirstHeader('Content-Type').value.split(';')[0] == "text/html"
		assert EntityUtils.toString(resp.entity) == 'TruncatedErrorPage'
	}
}

http(
	url: "${host}/bufferedBytes"
){
	handler{ resp ->
		assert resp.statusLine.statusCode == 200
		assert resp.getFirstHeader('Content-Type').value == "application/octet-stream"
		assert resp.getFirstHeader('Content-Length').value == '100000'
		assert resp.entity.content.bytes.length == 100000
	}
}
