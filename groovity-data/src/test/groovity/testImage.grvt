/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
load '/data/factory'

assert factory.isKnownType('image')

CountDownLatch latch = new CountDownLatch(3)

def watcher1 = factory.watch('image'){ pointer ->
	def image = factory(pointer)
	assert image.original.name == 'orig.jpg'
	latch.countDown()
}

def watcher2 = factory.watch('image',500){ pointer ->
	factory.refresh(pointer.type,pointer.id)
	def image = factory(pointer)
	assert image.original.name == 'orig.jpg'
	latch.countDown()
}

def watcher3 = factory.watch('image','mySampleImage',250){ pointer ->
	def image = factory(pointer)
	assert image.original.name == 'orig.jpg'
	latch.countDown()
}

def img = factory('image')
img.original = new Attachment.Bytes([11,13,15,17,19,21,23] as byte[])
	.putAll( 
		name:'orig.jpg', 
		contentType:'image/jpeg', 
		copyright:"Jim Bob", 
		width:1000, 
		height:500
	)
	
img.derived = [
	 new Attachment.Bytes([25,27,29,31] as byte[])
	 	.putAll( 
	 		name:'d1.jpg', 
	 		contentType:'image/jpeg', 
	 		copyright:"Jim Bob", 
	 		width:500, 
	 		height:250
	 	),
	 new Attachment.Bytes([33,35,37,39] as byte[])
	 	.putAll( 
	 		name:'d2.jpg', 
	 		contentType:'image/jpeg', 
	 		copyright:"Jim Bob", 
	 		width:250, 
	 		height:125
	 	)
]
img.pointer.id = "mySampleImage"
assert img.original.md5 == null
assert img.original.modified == null
img.store()
assert img.original.md5 != null
assert img.original.modified != null
assert img.original.copyright == 'Jim Bob'

def firstModified = img.original.modified

try{
	def rt = factory(img.pointer)
	
	def origBytes = rt.original.inputStream.bytes
	assert origBytes == ([11,13,15,17,19,21,23] as byte[])
	
	def d1Bytes = rt.derived[0].inputStream.bytes
	assert d1Bytes == ([25,27,29,31] as byte[])
	
	def d2Bytes = rt.derived[1].inputStream.bytes
	assert d2Bytes == ([33,35,37,39] as byte[])
	
	rt.original.copyright = 'Bob James'
	parse(value: write(value:rt,to:'',filter:ModelFilter.exclude(File.class)), to: rt)
	assert rt.original.copyright == 'Bob James'
	
	assert rt.original.inputStream == null
	
	rt.store()

	rt = factory(img.pointer)
	
	assert rt.original.copyright == 'Bob James'
	origBytes = rt.original.inputStream.bytes
	assert origBytes == ([11,13,15,17,19,21,23] as byte[])
	assert rt.original.modified == firstModified
	assert rt.original.length == 7
	assert rt.original.md5 == img.original.md5
	
	rt.original.copyright = 'Robert Jim'
	rt.store()
	
	rt = factory(img.pointer)
	
	assert rt.original.copyright == 'Robert Jim'
	origBytes = rt.original.inputStream.bytes
	assert origBytes == ([11,13,15,17,19,21,23] as byte[])
	assert rt.original.modified == firstModified
	assert rt.original.length == 7
	assert rt.original.md5 == img.original.md5
	
	rt.original = new Attachment.Bytes(rt.original)
	rt.original.bytes =  ([25,27,29,31,33,35] as byte[])
	rt.store()
	
	rt = factory(img.pointer)
	assert rt.original.copyright == 'Robert Jim'
	origBytes = rt.original.inputStream.bytes
	assert origBytes == ([25,27,29,31,33,35]  as byte[])
	assert rt.original.modified >= firstModified
	assert rt.original.length == 6
	assert rt.original.md5 != img.original.md5
	
	File d2 = new File('target/images/mySampleImage_/d2.jpg')
	
	assert d2.exists()
	
	rt.derived = rt.derived[0..0]
	
	rt.store()
	
	assert !d2.exists()
	
	assert latch.await(2,TimeUnit.SECONDS)
}
finally{
	watcher1.cancel(true)
	watcher2.cancel(true)
	watcher3.cancel(true)
	img.delete()
}