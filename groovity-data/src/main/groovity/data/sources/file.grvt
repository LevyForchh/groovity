/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/

import com.disney.groovity.data.StorePayload
import com.disney.groovity.data.Attacher
import groovy.io.FileType

/**
 * The file data source supports the following configuration options on types that leverage it
 *
 * file.basedir = the directory in which type data files are stored
 * file.extension = the file extension, if any, used for type data files.
 * file.format = customize the serialization format; defaults to json, can be changed to xml
 * file.encoding = the character encoding to use with files, default to UTF-8
 * 
 * The path of a data file in the filesystem will be ${file.basedir}/${id}.${file.extension}
 */
 
@CompileStatic
@Function(info="Look up one or more objects from the file data layer")
public void call(Map<String,Object> map, Map typeConf){
	def format = typeConf['file.format'] ?: 'json'
	map.each{ entry ->
		File file = getFile(entry.key, typeConf)
		if(file.exists()){
			file.withReader(getEncoding(typeConf)){ rdr->
				entry.value  = parse(value: rdr, format: format)
			}
			def attFolder = getDir("${entry.key}_",typeConf)
			if(attFolder.isDirectory()){
				def atts = []
				attFolder.eachFile(FileType.FILES){ k -> atts.add(new Attachment.File(k)) }
				if(atts){
					Attacher attacher = new Attacher()
					attacher.attachments = atts;
					attacher.visit(entry.value)
					entry.value = attacher.getCollected()
				}
			}
		}
	}
}

@CompileStatic
private String getEncoding(Map typeConf){
	if(typeConf.containsKey('file.encoding')){
		return typeConf.get('file.encoding')
	}
	'UTF-8'
}

@CompileStatic
@Function(info="Add one or more objects to the file data layer")
public String store(String id, StorePayload payload, Map typeConf){
	if(!id){
		id = UUID.randomUUID().toString();
		while(getFile(id, typeConf).exists()){
			id = UUID.randomUUID().toString();
		}
	}
	List<Attachment> atts = payload.attachmentsToStore
	def data = payload.data
	File file = getFile(id, typeConf)
	if(!file.parentFile.exists()){
		file.parentFile.mkdirs()
	}
	File temp = File.createTempFile('data', null, file.parentFile)
	def format = typeConf['file.format'] ?: 'json'
	temp.withWriter(getEncoding(typeConf)){ osm ->
		write(value:data, to:osm, format: format)
	}
	def copyFiles = [(temp): file]
	File atDir = getDir("${id}_",typeConf)
	File tempDir = null
	if(atts){
		tempDir = new File(temp.parentFile,"${temp.name}_")
		tempDir.mkdirs()
		atts.each{ att->
			File atFile = new File(tempDir, att.name)
			atFile.createNewFile()
			atFile.withOutputStream{ out ->
				out << att.inputStream
			}
			copyFiles.put(atFile,new File(atDir, att.name))
		}
		atDir.mkdirs()
	}
	copyFiles.each{ from, to->
		from.renameTo(to)
	}
	if(tempDir!=null){
		tempDir.delete()
	}
	List<String> dels = payload.attachmentsToDelete
	dels.each{
		new File(atDir,it).delete()
	}
	if(!atts){
		atDir.delete()
	}
	id
}

@CompileStatic
@Function(info="Remove an object from the file data layer")
public void delete(String id, Map typeConf){
	File file = getFile(id, typeConf)
	file.delete()
	File atDir = getDir("${id}_",typeConf)
	if(atDir.isDirectory()){
		File[] oldAttachments = atDir.listFiles()
		if(oldAttachments){
			oldAttachments.each{ ((File)it).delete() }
		}
		atDir.delete()
	}
}

@CompileStatic @SkipStatistics
private static File getFile(String key, Map typeConf){
	if(typeConf.containsKey('file.extension')){
		key = key+"."+typeConf.get('file.extension')
	}
	if(typeConf.containsKey('file.basedir')){
		return new File(typeConf.get('file.basedir').toString(),key)
	}
	return new File(key)
}

@CompileStatic @SkipStatistics
private static File getDir(String key, Map typeConf){
	if(typeConf.containsKey('file.basedir')){
		return new File(typeConf.get('file.basedir').toString(),key)
	}
	return new File(key)
}

@CompileStatic
@Function(info="retrieve IDs of file updates since the given date")
public long dateRange(String key, long lowerBound, long upperBound, Map typeConf, Closure keyCallback){
	if(!typeConf.containsKey('file.basedir')){
		throw new RuntimeException('Data type must specify file.basedir to support watches')
	}
	String ext=""
	if(typeConf.containsKey('file.extension')){
		ext = "."+typeConf.get('file.extension')
	}
	File dir = new File(typeConf.get('file.basedir').toString())
	File[] listing
	if(key!=null){
		File found = new File(dir,key.concat(ext))
		if(found.exists()){
			listing = [found]
		}
	}
	else{
		listing = dir.listFiles(new FileFilter(){
			boolean accept(File f){
				f.isFile() && f.name.endsWith(ext)
			}
		})
	}
	//filesystems only guarantee one-second granularity
	lowerBound = (long) (lowerBound/1000)*1000
	upperBound = (long) (upperBound/1000)*1000
	long rval = 0
	if(listing){
		for(int i=0;i<listing.length;i++){
			File file = listing[i]
			def lm = file.lastModified()
			if( lm >= lowerBound && lm < upperBound){
				if(lm > rval){
					rval = lm
				}
				String name = file.getName()
				if(ext){
					name = name.substring(0,name.length()-ext.length())
				}
				keyCallback(name)
			}
		}
	}
	if(rval==0){
		return lowerBound
	}
	(long) ((rval/1000)*1000) + 1000
}