/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/

import com.disney.groovity.data.StorePayload
import com.disney.groovity.data.AttachmentCollector

/**
 * A core set of traits for objects retrieved from the factory.  DataModel should be implemented 
 * by any top-level data type and applies a pointer to it describing its type and identifier.
 * Stored defines a store() and delete() method for data sources that support those operations. 
 */
 
trait DataModel implements Model, Ingest{
	Pointer pointer

	@CompileStatic @SkipStatistics public String toString(){
		toJsonString()
	}
	
	@CompileStatic
	public boolean ingest(String key, Object val){
		if(key=='pointer'){
			//we don't ingest the pointer from raw data, the factory controls it; but we swallow it so other traits don't try to process it
			return true
		}
		put(key,val)
	}
	
	@CompileStatic
	public Ingest ingest(Map<String, Object> data){
		data.each{ k,v ->
			ingest(k, v)
		}
		this
	}
	@CompileStatic
	public Ingest ingest(final Model data) {
		data.each{ String k,v ->
			ingest(k,v)
		}
		this
	}
}


trait Stored implements Store{
	Store store(){
		def ptr = getPointer()
		assert ptr : "This Stored Factory Object has not been acquired properly via factory('type')"
		DataModel prior = null
		def factory = load('/data/factory')
		if(ptr.id){
			factory.invalidate(ptr)
			prior = factory(ptr)
		}
		def config = getClass().getClassLoader().getConfiguration()
		String sourceScriptName = config.get('source').toString()
		if(!sourceScriptName.startsWith('/')){
			sourceScriptName = '/data/sources/'.concat(sourceScriptName)
		}
		def sourceScript = load(sourceScriptName)
		preStore(prior)
		ArrayList<ModelFilter> filters = new ArrayList<>()
		storeFilters(filters)
		def sp = new StorePayload(this, filters, prior)
		def newId = sourceScript.store(ptr.id, sp, config)
		if(newId && newId != ptr.id){
			ptr = new Pointer(ptr.type,newId)
			setPointer(ptr)
		}
		if(ptr.id){
			factory.invalidate(ptr)
		}
		offerChange(ptr,'store')
		this
	}
	
	void offerChange(Pointer pointer, String change){
		def event =  [ change: change, data: pointer.copy(), time: System.currentTimeMillis() ]
		if(binding?.hasVariable('request') && request?.hasProperty('userPrincipal')){
			event.user = request.userPrincipal
		}
		else if(binding?.hasVariable('socket') && socket?.hasProperty('userPrincipal')){
			event.user = socket.userPrincipal
		}
		offer(channel: '/data/changes', value: event)
	}

	public void preStore(DataModel old){
		//do nothing; other traits or models can extend to add functionality
	}

	void delete(){
		def ptr = getPointer()
		if(ptr.id){
			def config = getClass().getClassLoader().getConfiguration()
			String sourceScriptName = config.get('source').toString()
			if(!sourceScriptName.startsWith('/')){
				sourceScriptName = '/data/sources/'.concat(sourceScriptName)
			}
			load(sourceScriptName).delete(ptr.id, config)
			load('/data/factory').invalidate(ptr)
			offerChange(ptr, 'delete')
		}
	}
	
	@CompileStatic void storeFilters(List<ModelFilter> filters){
		filters.add(ModelFilter.exclude('pointer'))
	}
	
}
