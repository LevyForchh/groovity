/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
static AsyncChannel dataTransfers

/**
 * Starts '/data/transfer' channel accepting requests in the format
 * 
 */
 @Function(info='''Starts '/data/transfer' channel accepting requests in the format
 [
 	transfer:[
 		from:'someType',
 		id:['id123','id456'],
 		to:['otherType1','thirdType']
 	],
 	callback:{ results->
 		//code to execute when the transfer is complete, gets a list of all transferred models
 	}
 ]
 ''')
static start(){
	dataTransfers = accept(channel:'/data/transfer'){ req->
		async{
			try{
				def transfers = req.transfer
				if(!(transfers instanceof List)){
					transfers = [ transfers ]
				}
				def factory =  load('/data/factory')
				def results = await{ 
					transfers.each{ transfer->
						def from = transfer.from
						def ids = transfer.id
						if(!(ids instanceof List)){
							ids = [ ids ]
						}
						def to = transfer.to
						if(!(to instanceof List)){
							to = [ to ]
						}
						factory(from,ids).each{ source ->
							to.each{ t->
								def dest = null
								def type
								if(t instanceof Map){
									type = t.type
									dest = factory(t.type, t.id)
								}
								else if(t instanceof Pointer){
									dest = factory((Pointer)t)
									type = ((Pointer)t).type
								}
								else{
									type = t.toString()
								}
								if(dest == null){
									dest = factory(type)
								}
								if(!dest.pointer.id){
									dest.pointer.id = source.pointer.id
								}
								async{
									dest.ingest(source)
									dest.store()
								}
							}
						}
					}
				}
				req.callback?.call(results)
			}
			catch(Exception e){
				log(error:"Error transferring data",thrown:e)
				req.callback?.call([error:"Cannot transfer data: ${e.message}"])
			}
		}
	}
}

static destroy(){
	dataTransfers?.close()
}