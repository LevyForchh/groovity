/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import javax.xml.bind.DatatypeConverter;
static conf=[
	PORTAL_AUTH_REALM:'Portal'
]
static web = [
	path:"/portal/session/login",
	auth:[
		type:"digest",
		realm:{conf.PORTAL_AUTH_REALM},
		nonceSecret:"nq4yuqizVFx2WC5MkNHB",
		maxNonceAge:120000,
		domain:"/portal/session/",
		passwordDigester:"PortalPasswordDigester"
	],
	method:'GET'
];

static args = [
	redirect : "/"
]

load '/data/factory'

def person = factory('person',"userName=${request.remoteUser}")?.first()
if(person.login()){
	response.sendRedirect(redirect);
}
else{
	response.sendRedirect("/portal/session/logout?redirect=${redirect}")
}

class PortalPasswordDigester implements com.disney.http.auth.server.digest.PasswordDigester{
	public byte[] digest(String username, String realm) throws java.security.NoSuchAlgorithmException{
		def factory = load('/data/factory')
		def user = factory('person',"userName=${username}")?.first()
		if(user!=null && !user.suspended){
			def digest = user.digest;
			if(digest){
				return DatatypeConverter.parseHexBinary(digest);
			}	
		}
		return null;
	}
}
