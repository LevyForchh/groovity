/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import com.disney.groovity.data.service.AttachRequestWalker

static conf=[
	'groovity.data.service.buffer': '2MB'
]

static web=[
	path:'/data/{type}/{id}/attachments/{name}',
	method:'PUT',
	outputs:['application/json','application/xml'],
	charset:'UTF-8',
	auth:[ policy: { run('/data/service/policy') } ],
	cors:[ policy: { run('/data/service/policy') } ],
	buffer:{ conf['groovity.data.service.buffer'] }
]

load '/data/factory'

factory.invalidate(type, id)
dataModel = factory(type, id)

if(dataModel == null){
	response.sendError(404,"No DataModel Found ${id}")
	return
}

if(!(dataModel instanceof Stored)){
	response.sendError(400,'DataModel cannot be Stored')
	return
}
if(dataModel instanceof Shared){
	dataModel = dataModel.copy()
}

File temp = File.createTempFile('attachment',null)
try{
	temp.withOutputStream{
		it << request.inputStream
	}
	attacher = new AttachRequestWalker(name, request.getHeader("Content-Type"), temp)
	attacher.visit(dataModel)
	if(!attacher.handled){
		response.sendError(404,"No attachment Found ${name}")
		return
	}
	dataModel.store()
}
finally{
	temp.delete()
}
write(value: factory(dataModel.getPointer()), filter: Attachment.DESCRIBE)