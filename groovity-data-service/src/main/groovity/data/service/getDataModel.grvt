/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import com.disney.groovity.data.service.DataFilter

static conf=[
	'groovity.data.service.buffer': '2MB'
]

static web=[
	path:'/data/{type}/{id}',
	method:'GET',
	outputs:['application/json','application/xml'],
	charset:'UTF-8',
	auth:[ policy: { run('/data/service/policy') } ],
	cors:[ policy: { run('/data/service/policy') } ],
	buffer:{ conf['groovity.data.service.buffer'] }
]

static args=[
	type: String.class,
	id: String.class,
	fresh: false,
	include: new String[0],
	exclude: new String[0],
	expand: new String[0],
	promote: new String[0],
	collapse: new String[0]
]

@CompileStatic
@SkipStatistics
List filters(){
	// construct serialization filters based on args
	List filters = [Attachment.DESCRIBE]
	Map vars = binding.variables
	final String[] includes = (String[]) vars.include,
		excludes = (String[]) vars.exclude,
		expands = (String[]) vars.expand,
		promotes = (String[]) vars.promote,
		collapses = (String[]) vars.collapse

	if(includes.length > 0){
		filters.add(ModelFilter.include(includes))
	}
	if(excludes.length > 0){
		for(int i=0;i<excludes.length;i++){
			if(excludes[i] == 'null'){
				filters.add(ModelFilter.NULL)
			}
		}
		filters.add(ModelFilter.exclude(excludes))
	}
	if(expands.length > 0){
		filters.add(DataFilter.expand((Script)factory, expands))
	}
	if(promotes.length > 0){
		for(int i=0;i<promotes.length;i++){
			filters.add(ModelFilter.promote(promotes[i]))
		}
	}
	if(collapses.length > 0){
		filters.add(ModelFilter.collapse(collapses))
	}
	filters
}

@CompileStatic
void serialize(DataModel dataModel){
	write(value: dataModel, filter: filters())
}

//runtime: invalidate if fresh, load, error if null, else serialize

load '/data/factory'

if(fresh){
	factory.invalidate(type, id)
}

DataModel dataModel = factory(type, id)

if(dataModel == null){
	response.sendError(404)
}
else{
	serialize(dataModel)
}