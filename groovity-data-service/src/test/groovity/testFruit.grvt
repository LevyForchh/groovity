/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
static conf=[
	'groovity.port':int.class
]

load '/data/factory'

def baseUrl = "http://localhost:${conf['groovity.port']}"

resp = http(
	method: 'POST',
	url: "${baseUrl}/data/fruit",
	data: [
		name: 'Apple',
		picture: [ name: 'default-apple.jpg'],
		varieties: [
			[ 
				name: 'Golden Delicious',
				color: 'yellow',
				picture: [ name: 'golden-delicious.jpg' ]
			],
			[ 
				name: 'Red Delicious',
				color: 'red',
				picture: [ name: 'red-delicious.jpg' ]
			]
		]
	]
){
	header(name:'Content-Type', value:'application/json')
}

http(method:'PUT',url:"${baseUrl}/data/fruit/${resp.pointer.id}/attachments/default-apple.jpg",data:[1,2,3,4,5] as byte[]){
	header(name:'Content-Type', value:'image/jpeg')
}

http(method:'PUT',url:"${baseUrl}/data/fruit/${resp.pointer.id}/attachments/golden-delicious.jpg",data:[6,7,8,9,0] as byte[]){
	header(name:'Content-Type', value:'image/jpeg')
}

http(method:'PUT',url:"${baseUrl}/data/fruit/${resp.pointer.id}/attachments/red-delicious.jpg",data:[1,3,5,7,9,11,13] as byte[]){
	header(name:'Content-Type', value:'image/jpeg')
}

http(method:'PUT',url:"${baseUrl}/data/fruit/${resp.pointer.id}/attachments/green-delicious.jpg",data:[0,0,0,0] as byte[]){
	header(name:'Content-Type', value:'image/jpeg')
	handler{
		assert httpResponse.statusLine.statusCode == 404
	}
}

obj = factory('fruit',resp.pointer.id)
assert obj.name == 'Apple'
assert obj.picture.inputStream.bytes == [1,2,3,4,5] as byte[]
assert obj.picture.rights == null
assert obj.varieties[0].picture.inputStream.bytes == [6,7,8,9,0] as byte[]
assert obj.varieties.find{ it.name=='Red Delicious' }.picture.inputStream.bytes == [1,3,5,7,9,11,13] as byte[]

resp = http(method:'GET',url:"${baseUrl}/data/fruit/${resp.pointer.id}")

assert resp.name == 'Apple'
resp.name = 'Apples'
resp.picture.rights = 'Public Domain'

http(method:'PUT',url:"${baseUrl}/data/fruit/${resp.pointer.id}",data:resp){
	header(name:'Content-Type', value:'application/json')
}

obj = factory('fruit',resp.pointer.id)
assert obj.name == 'Apples'
assert obj.picture.inputStream.bytes == [1,2,3,4,5] as byte[]
assert obj.picture.rights == 'Public Domain'
assert obj.varieties[0].picture.inputStream.bytes == [6,7,8,9,0] as byte[]
assert obj.varieties.find{ it.name=='Red Delicious' }.picture.inputStream.bytes == [1,3,5,7,9,11,13] as byte[]

http(method:'GET',url:"${baseUrl}/data/fruit/${resp.pointer.id}/attachments/default-apple.jpg"){
	handler{
		assert httpResponse.getFirstHeader('Content-Type').value == 'image/jpeg'
		assert httpResponse.getFirstHeader('Content-Length').value == '5'
		assert httpResponse.entity.content.bytes ==  [1,2,3,4,5] as byte[]
	}
}

http(method:'GET',url:"${baseUrl}/data/fruit/${resp.pointer.id}/attachments/red-delicious.jpg"){
	handler{
		assert httpResponse.getFirstHeader('Content-Type').value == 'image/jpeg'
		assert httpResponse.getFirstHeader('Content-Length').value == '7'
		assert httpResponse.entity.content.bytes ==  [1,3,5,7,9,11,13] as byte[]
	}
}

resp = http(
	method: 'POST',
	url: "${baseUrl}/data/fruit",
	data: [
		[
			name: 'name',
			body: 'Orange'
		],
		[
			name: 'picture',
			filename: 'default-orange.jpg',
			type: 'image/jpeg',
			body: [15,30,45,60,75] as byte[]
		]
	]
){
	header(name:'Content-Type', value:'multipart/form-data')
}

obj = factory('fruit',resp.pointer.id)
//log(info:"Factory got ${obj}")
assert obj.name == 'Orange'
assert obj.picture.foo == null
assert obj.picture.inputStream.bytes == [15,30,45,60,75] as byte[]

resp = http(
	method: 'POST',
	url: "${baseUrl}/data/fruit/${resp.pointer.id}",
	data: [
		[
			name: 'picture.foo',
			body: 'barbar'
		]
	]
){
	header(name:'Content-Type', value:'multipart/form-data')
}

obj = factory('fruit',resp.pointer.id)
//log(info:"Factory got ${obj}")
assert obj.name == 'Orange'
assert obj.picture.foo == 'barbar'
assert obj.picture.inputStream.bytes == [15,30,45,60,75] as byte[]

resp = http(
	method: 'POST',
	url: "${baseUrl}/data/fruit/${resp.pointer.id}",
	data: [
		[
			name: 'varieties[0].name',
			body: 'Mandarin'
		],
		[
			name: 'varieties[0].picture',
			filename: 'mandarin-orange.jpg',
			type: 'image/jpeg',
			body: [100,105,110,115] as byte[]
		],
		[
			name: 'varieties[1].name',
			body: 'Clementine'
		],
		[
			name: 'varieties[1].picture',
			filename: 'clementine-orange.jpg',
			type: 'image/jpeg',
			body: [120,121,122,123,124,125,126] as byte[]
		]
	]
){
	header(name:'Content-Type', value:'multipart/form-data')
}

obj = factory('fruit',resp.pointer.id)
//log(info:"Factory got ${obj}")
assert obj.name == 'Orange'
assert obj.picture.foo == 'barbar'
assert obj.picture.inputStream.bytes == [15,30,45,60,75] as byte[]
assert obj.varieties[0].name=='Mandarin'
assert obj.varieties[0].picture.inputStream.bytes == [100,105,110,115] as byte[]
assert obj.varieties[1].name=='Clementine'
assert obj.varieties[1].picture.inputStream.bytes == [120,121,122,123,124,125,126] as byte[]

resp = http(
	method: 'POST',
	url: "${baseUrl}/data/fruit/${resp.pointer.id}",
	data: [
		[
			name: 'varieties[0].picture.alt',
			body: 'Mandarine'
		],
		[
			name: 'varieties[1].picture.alt',
			body: 'Clemenules'
		]
	]
){
	header(name:'Content-Type', value:'multipart/form-data')
}

obj = factory('fruit',resp.pointer.id)
//log(info:"Factory got ${obj}")
assert obj.name == 'Orange'
assert obj.picture.foo == 'barbar'
assert obj.picture.inputStream.bytes == [15,30,45,60,75] as byte[]
assert obj.varieties[0].name=='Mandarin'
assert obj.varieties[0].picture.inputStream.bytes == [100,105,110,115] as byte[]
assert obj.varieties[0].picture.alt=='Mandarine'
assert obj.varieties[1].name=='Clementine'
assert obj.varieties[1].picture.inputStream.bytes == [120,121,122,123,124,125,126] as byte[]
assert obj.varieties[1].picture.alt=='Clemenules'

http(
	method: 'POST',
	url: "${baseUrl}/data/fruit/${resp.pointer.id}",
	data: [
		[
			name: 'varieties[-3].picture',
			filename: 'navel.jpg',
			type: 'image/jpeg',
			body: [98,97,96] as byte[]
		],
		[
			name: 'varieties[-2].picture',
			filename: 'blood.jpg',
			type: 'image/jpeg',
			body: [101,102,103] as byte[]
		]
	]
){
	header(name:'Content-Type', value:'multipart/form-data')
}

obj = factory('fruit',resp.pointer.id)

assert obj.varieties.size() == 5
assert obj.varieties[0].name=='Mandarin'
assert obj.varieties[0].picture.inputStream.bytes == [100,105,110,115] as byte[]
assert obj.varieties[0].picture.alt=='Mandarine'
assert obj.varieties[1].name=='Clementine'
assert obj.varieties[1].picture.inputStream.bytes == [120,121,122,123,124,125,126] as byte[]
assert obj.varieties[1].picture.alt=='Clemenules'
assert obj.varieties[2] == null
assert obj.varieties[3].name==null
assert obj.varieties[3].picture.name=='blood.jpg'
assert obj.varieties[3].picture.inputStream.bytes == [101,102,103] as byte[]
assert obj.varieties[4].picture.name=='navel.jpg'
assert obj.varieties[4].picture.inputStream.bytes == [98,97,96] as byte[]

http(
	method: 'DELETE',
	url: "${baseUrl}/data/fruit/${resp.pointer.id}"
)

http(
	method: 'GET',
	url: "${baseUrl}/data/fruit/${resp.pointer.id}"
){
	handler{
		assert httpResponse.statusLine.statusCode == 404
	}
}