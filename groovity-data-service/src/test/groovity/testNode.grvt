/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
static conf=[
	'groovity.port':int.class
]

load '/data/factory'

def baseUrl = "http://localhost:${conf['groovity.port']}"

def kids = []
for(int i = 0; i < 10; i++){
	kids <<  http(
		method: 'POST',
		url: "${baseUrl}/data/node",
		data: [
			name: "Child ${i}",
			description: i % 2 ? "Description ${i}" : null 
		]
	){
		header(name:'Content-Type', value:'application/json')
	}
}

def parent = http(
	method: 'POST',
	url: "${baseUrl}/data/node",
	data: [
		name: 'Parent',
		children: kids.collect{ it.pointer }
	]
){
	header(name:'Content-Type', value:'application/json')
}

def parentUrl = "${baseUrl}/data/node/${parent.pointer.id}"

def resp = http(url:parentUrl)

assert resp.containsKey('description')
assert resp.containsKey('name')
assert resp.children[0].containsKey('type')
assert resp.children[0].containsKey('id')
assert resp.containsKey('pointer')
assert !resp.containsKey('type')

resp = http(url:"${parentUrl}?exclude=null")

assert !resp.containsKey('description')
assert resp.containsKey('name')
assert resp.children[0].containsKey('type')
assert resp.children[0].containsKey('id')
assert resp.containsKey('pointer')
assert !resp.containsKey('type')

resp = http(url:"${parentUrl}?exclude=name")

assert resp.containsKey('description')
assert !resp.containsKey('name')
assert resp.children[0].containsKey('type')
assert resp.children[0].containsKey('id')
assert resp.containsKey('pointer')
assert !resp.containsKey('type')

resp = http(url:"${parentUrl}?include=children.id")

assert !resp.containsKey('description')
assert !resp.containsKey('name')
assert !resp.children[0].containsKey('type')
assert resp.children[0].containsKey('id')
assert !resp.containsKey('pointer')
assert !resp.containsKey('type')

resp = http(url:"${parentUrl}?include=pointer&promote=pointer.id")

assert resp.containsKey('pointer')
assert resp.pointer instanceof String

resp = http(url:"${parentUrl}?collapse=pointer")

assert resp.containsKey('description')
assert resp.containsKey('name')
assert resp.children[0].containsKey('type')
assert resp.children[0].containsKey('id')
assert !resp.containsKey('pointer')
assert resp.containsKey('type')

resp = http(url:"${parentUrl}?expand=children&exclude=null&collapse=children.pointer")

assert !resp.children[0].containsKey('description')
assert resp.children[1].containsKey('description')
assert !resp.children[0].containsKey('children')
assert !resp.children[1].containsKey('children')
assert resp.children[0].containsKey('id')
assert resp.children[1].containsKey('id')
resp
