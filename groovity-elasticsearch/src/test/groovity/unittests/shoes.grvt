/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import java.util.concurrent.atomic.AtomicInteger

static void init(){
	System.setProperty('/data/sources/elasticsearch/es.refresh','true')
}

//http(method:'DELETE',url:'http://localhost:9200/unit_test_shoe_inventory'){handler{}}

load '/data/factory'

def compareFilter = ModelFilter.exclude('pointer','modified')

def inventory = [
	[ mens:true, size:10.5, eyelets:6, modified: 1500000000000 ],
	[ mens:true, size:11.0, eyelets:10, modified: 1500000100000 ],
	[ mens:true, size:9.5, eyelets:8, modified: 1500000200000  ],
	[ womens:true, size:10.0, eyelets:4, modified: 1500000300000  ],
	[ womens:true, size: 9.0, eyelets:6, modified: 1500000400000  ],
	[ kids:true, size:12.0, eyelets: 4, modified: 1500000500000 ]
]

def get(factory,type,key){
	factory.invalidate(type,key)
	factory(type,key)
}

def shoes = inventory.collect{  factory(factory('shoe').ingest(it).store().pointer) }
try{
def mensShoes = get(factory,'shoe','_search?q=mens:true&sort=size:desc')

assert mensShoes.size() == 3

def womensShoes = get(factory,'shoe','_search?q=womens:true&sort=size:desc')

assert womensShoes.size() == 2

def medium = get(factory,'shoe','_search?q=size:[10.0 TO 12.0]')

assert medium.size() == 4

def mediumLow = get(factory,'shoe','_count?q=size:[10.0 TO 12.0] AND eyelets:[0 TO 6]')

assert mediumLow == 3

shoes.each{
	def rawShoe = get(factory,'elasticsearch',"unit_test_shoe_inventory/shoe/${it._id}")
	assert rawShoe.map(compareFilter) == it.map(compareFilter)
}

def biggestThree = get(factory,'shoe','_search?sort=size:desc&size=3&from=1')
assert biggestThree.size() == 3
assert biggestThree[0].size==11.0

def smallestTwo = get(factory,'shoe','_search?sort=size:asc&size=2&from=2')
assert smallestTwo.size() == 2
assert smallestTwo[1].size==10.5

CountDownLatch watchLatch = new CountDownLatch(6)
AtomicInteger counter = new AtomicInteger()
def max = 0;
max = factory.dateRange('shoe',null,1499999999999,1510000000000){
	counter.incrementAndGet()
}

assert max == 1500000500000l
assert counter.get() == 6

def aq = write(to:'',value:[
	query:[range:[size:[gt:10]]],
	aggs:[eyelets:[terms:[field:'eyelets']]]
])

def agg = get(factory,'shoeQuery',aq)
assert agg.hits.total==3
assert agg.aggregations.eyelets.buckets.size() == 3
agg.aggregations.eyelets.buckets.each{
	assert it.doc_count == 1
}

}
finally{
	shoes.each{
		it.delete()
	}
}
mensShoes = get(factory,'shoe','_search?q=mens:true&sort=size:desc')

assert mensShoes.size() == 0
