/*******************************************************************************
 * © 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
static conf=[
	'groovity.port':-1
]

def host = "http://localhost:${conf['groovity.port']}"

http(url:"${host}/sampleException"){
	handler{
		assert httpResponse.statusLine.statusCode == 500
		assert httpResponse.getFirstHeader('Content-Type').value == 'application/json;charset=utf-8'
		def body = parse(value:httpResponse)
		assert body.message == 'Exception: Whoops! åaÅåéá'
	}
}

http(url:"${host}/sampleException"){
	header(name: "Accept", value: "application/xml")
	header(name: "Accept-Charset", value: "Windows-1252")
	handler{
		assert httpResponse.statusLine.statusCode == 500
		assert httpResponse.getFirstHeader('Content-Type').value == 'application/xml; charset=Windows-1252'
		def body = parse(value:httpResponse)
		assert body.message == 'Exception: Whoops! åaÅåéá'
	}
}

http(url:"${host}/notThere"){
	header(name: "Accept", value: "text/html")
	handler{
		assert httpResponse.statusLine.statusCode == 404
		assert httpResponse.getFirstHeader('Content-Type').value == 'text/html;charset=utf-8'
		def body = parse(value: httpResponse, format:'xml')
		assert body.head.title == 'Error 404 Not Found'
	}
}

http(url:"${host}/notThere"){
	header(name: "Accept", value: "foo/bar")
	handler{
		assert httpResponse.statusLine.statusCode == 404
		assert httpResponse.getFirstHeader('Content-Type').value == 'application/json;charset=utf-8'
		def body = parse(value: httpResponse)
		assert body.reason == 'Not Found'
	}
}

http(url:"${host}/statusException"){
	header(name: "Accept", value: "application/json")
	handler{
		assert httpResponse.statusLine.statusCode == 400
		assert httpResponse.getFirstHeader('Content-Type').value == 'application/json;charset=utf-8'
		def body = parse(value: httpResponse)
		assert body.message == 'Not able to handle it'
	}
}

http(url:"${host}/statusException"){
	header(name: "Accept", value: "foo/bar")
	handler{
		assert httpResponse.statusLine.statusCode == 406
		assert httpResponse.getFirstHeader('Content-Type').value == 'application/json;charset=utf-8'
		def body = parse(value: httpResponse)
		assert body.message != 'Not able to handle it'
	}
}

http(method:'PUT', url:"${host}/statusException"){
	header(name: "Accept", value: "foo/bar")
	handler{
		assert httpResponse.statusLine.statusCode == 405
		assert httpResponse.getFirstHeader('Content-Type').value == 'application/json;charset=utf-8'
		def body = parse(value: httpResponse)
		assert body.message != 'Not able to handle it'
	}
}
