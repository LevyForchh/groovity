/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
static web=[
	path: '/groovity/servlet/errorPage',
	outputs: ['application/json', 'text/html', 'application/xml', 'text/xml', 'text/plain'],
	charsets: ['UTF-8', 'ISO-8859-1', 'Windows-1252']
]

static conf=[
	'groovity.errorPageTag' : 'defaultErrorHtmlPageShell'
]

static ModelFilter[] errorFilters = [
	ModelFilter.exclude('scriptClass','scriptPath'),
	ModelFilter.transform('cause'){ it?.getClass()?.name },
	ModelFilter.NULL
]

switch(variant.output){
	case 'text/html':
		def title  = "Error ${error.status} ${error.reason}"
		tag(conf['groovity.errorPageTag'], [title: title]){
			htmlError(title)
		}
		break;
	case 'text/plain':
		return textError()
	default:
		write(value: error, pretty: true, filter: errorFilters, root: 'error')
}

def htmlError(String title){
	write{ 
<~
<strong>${title}</strong>
<p>${error.uri}</p>
<g:if test="${error.message}">
<pre>    ${error.message}</pre>
</g:if>
${error.cause?.getClass()?.name}
~>
	}
}

def textError(){
<~Error ${error.status} ${error.reason}
${error.uri}
<g:if test="${error.message}">
    ${error.message}
</g:if>
${error.cause?.getClass()?.name}
~>	
}

@Tag(info="Default error page HTML shell")
class DefaultErrorHtmlPageShell{
	def tag(Map atts, Closure body){
		stream "<html><head><title>${atts.title}</title></head>"
		body()
		stream "</html>"
	}
}