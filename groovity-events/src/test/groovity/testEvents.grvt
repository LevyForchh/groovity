/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
static conf=[
	'groovity.port':int.class
]

def host = "ws://localhost:${conf['groovity.port']}"

//in test mode we have security that should prevent an unauthenticated connection
def authError = null
try{
	def socket1 = ws(url:"${host}/ws/events", error:{ }){
	}
}
catch(Exception e){
	authError = e
}
assert authError

def corsError = null
try{
	def socket2 = ws(url:"${host}/ws/events",error:{ }){
		credentials(user:'method',pass:'madness')
	}
}
catch(Exception e){
	corsError = e
}
assert corsError


def results = []
def subLatch = new CountDownLatch(1)
def unsubLatch = new CountDownLatch(1)
def resultLatch = new CountDownLatch(3)
def socket = ws(url:"${host}/ws/events"){
	header(name:"Origin",value:"http://whatever.com")
	credentials(user:'method',pass:'madness')
	handler{ msg ->
		msg = parse(value:msg)
		if(msg.id=='subbing'){
			subLatch.countDown()
		}
		else if(msg.id=='unsubbing'){
			unsubLatch.countDown()
		}
		else{
			results.add(msg.data)
			resultLatch.countDown()
		}
	}
}

try{
emit(event:'testEvent', value:'12345')

socket([subscribe:'testEvent', id:"subbing"])
assert subLatch.await(1, TimeUnit.SECONDS)

emit(event:'testEvent', value:'67890')

emit(user:'nobody', event:'testEvent', value:'job not done')

emit(user:'method', event:'testEvent', value:'job done')

socket([unsubscribe:'testEvent', id:"unsubbing"])
assert unsubLatch.await(1, TimeUnit.SECONDS)

emit(event:'testEvent', value:'abcdef')

socket([event:'message', data:'qwertyuiop', id:'reversed'])

assert resultLatch.await(1, TimeUnit.SECONDS)
//compare using hash sets to ignore out-of-order, since async message order is not deterministic
assert new HashSet(results) == new HashSet(['67890','job done','poiuytrewq'])
}
finally{
	socket.close()
	Thread.sleep(10)
}